<?php

namespace  YiluTech\YiMQ\Tests\Feature;

use YiluTech\YiMQ\ClientManager;
use YiluTech\YiMQ\Constants\MessageAction;
use YiluTech\YiMQ\Constants\MessageProcessAction;
use YiluTech\YiMQ\Constants\MessageType;
use YiluTech\YiMQ\Facades\YiMQ;
use YiluTech\YiMQ\Helpers;
use YiluTech\YiMQ\Laravel\LaravelClient;
use YiluTech\YiMQ\Tests\TestCase;

class ProcessorTest extends TestCase
{
    protected LaravelClient $client;
    function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        YiMQ::client()->testClear();
    }

    function testSingleton(){
        $this->assertEquals(spl_object_id(resolve(ClientManager::class)),spl_object_id(resolve(ClientManager::class)));
        $this->assertEquals(spl_object_id(resolve(ClientManager::class)),spl_object_id(YiMQ::manager()));
    }
    function testLaravelClientCommit(){
        YiMQ::mock()->transaction("test");
        YiMQ::mock()->prepare("test");

        $trans = YiMQ::transaction("test");
        $trans->begin();
        $trans->commit();
        $this->assertEquals(1,1);
        $this->assertDatabaseHas(YiMQ::client()->messageTable(),['action'=>MessageAction::SUBMITTED]);
    }

    function testLaravelClientRollback(){
        YiMQ::mock()->transaction("test");
        YiMQ::mock()->prepare("test");

        $trans = YiMQ::transaction("test");
        $trans->begin();
        $trans->rollback();
        $this->assertEquals(1,1);
        $this->assertDatabaseHas(YiMQ::client()->messageTable(),['action'=>MessageAction::CANCELED]);
    }



    public function test_trans_check()
    {
        YiMQ::mock()->transaction("test");
        YiMQ::mock()->prepare("test");

        $trans = YiMQ::transaction("test");


        $trans->begin();
        $trans->commit();

        $data = [
            "message_id"=>$trans->getId()
        ];
        $reply = YiMQ::client()->transCheck($data);

        $this->assertEquals($reply["data"]["action"],MessageAction::SUBMITTED);
    }

    public function test_process_log()
    {


        $context = [
            'processor' => 'UserCreateEc',
            'action'=>MessageProcessAction::SUBMIT,
            'type' => MessageType::TRANS_EC,
            'id' => Helpers::ksuid(),
            'trans_id' => Helpers::ksuid(),
            'producer' => '1',
            'data' => [
                'username'=>"error_test"
            ]
        ];

        $reply = YiMQ::client()->processorManager()->process($context);

        $this->assertEquals($reply['error'],"error_test");
        $this->assertStringContainsString("UserCreateEcProcessor.php",$reply['stack']);
    }

}
